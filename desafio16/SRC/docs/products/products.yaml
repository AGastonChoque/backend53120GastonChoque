openapi: 3.0.0
info:
  version: 1.0.0
  title: Products API
  description: API for managing products

paths:
  /api/products:
    post:
      summary: Add a new product
      operationId: addProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProduct'
      responses:
        '200':
          description: Product added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
    get:
      summary: Get products
      operationId: getProducts
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Maximum number of products to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: query
          schema:
            type: string
          description: Search query
        - in: query
          name: sort
          schema:
            type: string
          description: Sort order
        - in: query
          name: status
          schema:
            type: string
          description: Product status
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid query parameters
    put:
      summary: Update a product
      operationId: updateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '404':
          description: Product not found
    delete:
      summary: Delete a product
      operationId: deleteProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                id: 
                 type: string
                 format: object-id
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found

  /api/products/{id}:
    get:
      summary: Get a product by ID
      operationId: getProductById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: object-id
          description: Product ID
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

  /api/products/generate/mockingproducts:
    get:
      summary: Generate mocking products
      operationId: generateMockingProducts
      security:
        - jwt: []
      responses:
        '200':
          description: Mocking products generated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request
        '500':
          description: Server error

components:
  schemas:
    AddProduct:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: number
        thumbnails:
          type: array
          default: []
        code:
          type: string
        stock :
          type: number
        status: 
          type: boolean
        category: 
          type: string
      required:
        - title
        - description
        - price
        - code
        - stock
        - category
    Product:
      type: object
      properties:
        _id:
          type: string
          format: object-id
        title:
          type: string
        description:
          type: string
        price:
          type: number
        thumbnails:
          type: array
          default: []
        code:
          type: string
        stock :
          type: number
        status: 
          type: boolean
        category: 
          type: string
    ProductUpdate:
      type: object
      properties:
        _id:
          type: string
          format: object-id
        title:
          type: string
        description:
          type: string
        price:
          type: number
        thumbnails:
          type: array
          default: []
        code:
          type: string
        stock :
          type: number
        status: 
          type: boolean
        category: 
          type: string
      required:
        - _id
        - code